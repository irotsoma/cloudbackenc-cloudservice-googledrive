/*
 * Copyright (C) 2016-2019  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

buildscript {
    ext.commonVersion = '0.4-SNAPSHOT'
    ext.kotlinVersion = '1.3.11'
    ext.dokkaVersion = '0.9.17'
    ext.springWebVersion ='5.1.4.RELEASE'
    ext.googleApiVersion = '1.23.0'
    ext.googleDriveApiVersion = 'v3-rev20181213-1.28.0'
    ext.junitVersion = '5.3.2'
    ext.kotlinLoggingVersion = '1.6.22'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }
}
plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

group 'com.irotsoma.cloudbackenc.cloudservice'
version '0.4-SNAPSHOT'
def secretFolder = "$rootDir/../secret"
apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    mavenCentral()
    //if the current project is a snapshot then allow using snapshot versions from maven central  Having this as an if prevents accidentally building a release version with snapshot dependencies.
    if (project.version.endsWith('-SNAPSHOT')){
        maven{
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "com.irotsoma.cloudbackenc:common:$commonVersion"
    compile "com.irotsoma.cloudbackenc.common:cloudservices:$commonVersion"
    compile "org.springframework:spring-web:$springWebVersion"
    compile "com.google.apis:google-api-services-drive:$googleDriveApiVersion"
    compile "com.google.api-client:google-api-client-java6:$googleApiVersion"
    compile "com.google.oauth-client:google-oauth-client-jetty:$googleApiVersion"
    //logging
    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    //testCompile("org.junit.platform:junit-platform-runner:1.1.0-RC1")
}

apply plugin: 'signing'
def isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion }
    sign configurations.archives
}
if (!isReleaseVersion) {
    configurations.all {
        // check for updates every build
        resolutionStrategy{
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}
compileKotlin {
    kotlinOptions.jvmTarget= "1.8"
}
sourceSets {
    main {
        java{
            srcDir 'src/main/kotlin'
        }
        resources {
            srcDir "$buildDir/license-reports/"
        }
    }
    test.java.srcDir 'src/test/kotlin'
}

//javadoc stuff for Kotlin
apply plugin: 'org.jetbrains.dokka'
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/docs/javadoc"
}
task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

//build a source jar
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//configure shadowJar to only include dependencies not in central controller
shadowJar{
    dependencies{
        include (dependency('com.google.*:.*'))
        include (dependency('org.mortbay.*:.*'))
    }
}

artifacts {
    archives shadowJar
    archives sourceJar
    archives javadocJar
}
//this section downloads some reports regarding the licenses of various dependencies and includes them in the
// META-INF/licenses folder
apply plugin: 'com.github.hierynomus.license'
license {
    ignoreFailures true
    mapping ('kt', 'JAVADOC_STYLE')
    excludes(['**/*.json', '**/*.properties', '**/LICENSE', '**/*license*.html', '**/*license*.xml', '**/COPYING', '**/COPYING.LESSER'])
}
task copyLicenseReports(type: Copy){
    from "$buildDir/reports/license/"
    into "$buildDir/license-reports/META-INF/licenses"
}
assemble.dependsOn 'downloadLicenses'
assemble.dependsOn 'copyLicenseReports'
copyLicenseReports.mustRunAfter 'downloadLicenses'


//This section will copy the GoogleDriveSettings.kt file from the /secret folder before build and then replace it with
//the original afterward.  This allows for putting the actual api key and secret in a separate repository and using it
//only at compile time. Adjust the variables at the top to change locations and file name.
def packageLocation = 'src/main/kotlin/com/irotsoma/cloudbackenc/cloudservice/googledrive/'
def fileName = 'GoogleDriveSettings.kt'
def tempFolder = "$buildDir/tmp"

task copySettingsToTemp(type: Copy){
    from packageLocation
    include fileName
    into tempFolder
}
task copySecretToSource(type: Copy){
    from secretFolder
    include fileName
    into packageLocation
}
task copyBlankSettingsToSource(type: Copy){
    from tempFolder
    include fileName
    into packageLocation
}
assemble.dependsOn 'copySettingsToTemp'
assemble.dependsOn 'copySecretToSource'
copySecretToSource.mustRunAfter 'copySettingsToTemp'

assemble.finalizedBy copyBlankSettingsToSource